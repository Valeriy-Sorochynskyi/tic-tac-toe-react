{"version":3,"sources":["Player.js","Status.js","App.js","serviceWorker.js","index.js"],"names":["Player","e","preventDefault","this","props","player","target","value","_this","react_default","a","createElement","onSubmit","handleSubmit","type","name","React","Component","Status","setPlayer","winner","isDraw","src_Player","handleSetPlayer","renderWinner","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","board","Array","fill","stepsAmount","setState","newBoard","winComb","index","length","_winComb$index","slicedToArray","b","c","_this2","slice","newstepsAmount","checkWinner","checkDraw","_this3","map","cell","className","key","onClick","handleClick","_this4","src_Status","renderCells","disabled","reset","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5a198298.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nclass Player extends React.Component {\r\n\r\n    handleSubmit(e) {\r\n        e.preventDefault();\r\n        this.props.player(e.target.player.value);\r\n    }\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={(e) => this.handleSubmit(e)}>\r\n        <label>\r\n          Player X\r\n          <input type=\"radio\" name=\"player\" value=\"X\" />\r\n        </label>\r\n        <label>\r\n          Player O\r\n          <input type=\"radio\" name=\"player\" value=\"O\" />\r\n        </label>\r\n        <input type=\"submit\" value=\"Start\" />\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Player;\r\n","import React from \"react\";\r\nimport Player from \"./Player\";\r\n\r\nclass Status extends React.Component {\r\n  handleSetPlayer(e) {\r\n    this.props.setPlayer(e);\r\n  }\r\n\r\n  renderWinner() {\r\n    if (this.props.winner) {\r\n      return <h2>Winner is {this.props.winner}</h2>;\r\n    } else if(this.props.isDraw){\r\n        return <h2>It's Draw</h2>\r\n    } else {\r\n        return this.props.player ? (\r\n            <h3>Next player {this.props.player}</h3>\r\n          ) : (\r\n            <Player player={e => this.handleSetPlayer(e)} />\r\n          );\r\n    }\r\n      \r\n  }\r\n\r\n  render() {\r\n    return this.renderWinner();\r\n  }\r\n}\r\n\r\nexport default Status;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Status from \"./Status\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      board: Array(9).fill(null),\n      player: null,\n      winner: null,\n      isDraw: null,\n      stepsAmount: 0\n    };\n  }\n\n  checkDraw() {\n    if (!this.state.winner && this.state.stepsAmount === 9) {\n      this.setState({\n        isDraw: true\n      });\n    }\n    return;\n  }\n\n  checkWinner(newBoard) {\n    let winComb = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6]\n    ];\n\n    for (let index = 0; index < winComb.length; index++) {\n      const [a, b, c] = winComb[index];\n      if (\n        newBoard[a] &&\n        newBoard[a] === newBoard[b] &&\n        newBoard[a] === newBoard[c]\n      ) {\n        return this.state.player;\n      }\n    }\n  }\n\n  handleClick(index) {\n    if (this.state.player && !this.state.winner) {\n      const newBoard = this.state.board.slice();\n     \n      let newstepsAmount = this.state.stepsAmount;\n      if (this.state.board[index] === null) {\n        newBoard[index] = this.state.player;\n         const winner = this.checkWinner(newBoard);\n        this.setState(\n          {\n            board: newBoard,\n            player: this.state.player === \"X\" ? \"O\" : \"X\",\n            stepsAmount: newstepsAmount + 1,\n            winner: winner,\n          },\n          () => {\n            this.checkDraw();\n          }\n        );\n      }\n    }\n  }\n\n  setPlayer(player) {\n    this.setState({ player });\n  }\n\n  renderCells() {\n    return this.state.board.map((cell, index) => (\n      <div className=\"box\" key={index} onClick={() => this.handleClick(index)}>\n        {cell}\n      </div>\n    ));\n  }\n\n  reset() {\n    this.setState({\n      board: Array(9).fill(null),\n      player: null,\n      winner: null,\n      stepsAmount: 0,\n      isDraw: null\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <h1>Tic Tac Toe App</h1>\n        <Status\n          player={this.state.player}\n          setPlayer={e => this.setPlayer(e)}\n          winner={this.state.winner}\n          isDraw={this.state.isDraw}\n        />\n        <div className=\"board\">{this.renderCells()}</div>\n        <button\n          disabled={!this.state.winner && !this.state.isDraw}\n          onClick={() => this.reset()}\n        >\n          Reset\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}